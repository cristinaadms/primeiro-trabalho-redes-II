import networkx as nx
import matplotlib.pyplot as plt
import random
import os
import csv

def gerar_grafo_aleatorio(quantidade_nos: int, probabilidade_conexao: float = 0.3, peso_minimo: int = 1, peso_maximo: int = 10):
    """
    Gera um grafo aleatório utilizando o modelo de Erdős–Rényi com a probabilidade de conexão entre os nós.
    
    Parâmetros:
    - quantidade_nos (int): número de nós no grafo.
    - probabilidade_conexao (float): probabilidade de existir uma aresta entre dois nós.
    - peso_minimo (int): peso mínimo das arestas.
    - peso_maximo (int): peso máximo das arestas.
    
    Retorna:
    - grafo (networkx.Graph): o grafo gerado.
    """
    grafo = nx.erdos_renyi_graph(quantidade_nos, probabilidade_conexao)
    
    # Adiciona pesos aleatórios para as arestas
    for no_origem, no_destino in grafo.edges():
        peso = random.randint(peso_minimo, peso_maximo)
        grafo[no_origem][no_destino]['peso'] = peso
    
    # Garantir que o grafo seja conexo
    while not nx.is_connected(grafo):
        no_origem, no_destino = random.sample(range(quantidade_nos), 2)
        if not grafo.has_edge(no_origem, no_destino):
            peso = random.randint(peso_minimo, peso_maximo)
            grafo.add_edge(no_origem, no_destino, peso=peso)

    return grafo

def salvar_imagem_grafo(grafo: nx.Graph, caminho_imagem: str = 'grafo.png'):
    """
    Salva uma imagem do grafo com rótulos e pesos das arestas.
    
    Parâmetros:
    - grafo (networkx.Graph): o grafo a ser salvo.
    - caminho_imagem (str): caminho para o arquivo de imagem a ser salvo.
    """
    posicao_nos = nx.circular_layout(grafo)
    pesos = nx.get_edge_attributes(grafo, 'peso')

    plt.figure(figsize=(10, 10))
    nx.draw(grafo, posicao_nos, with_labels=True, node_color='skyblue', node_size=500, edge_color='gray')
    nx.draw_networkx_edge_labels(grafo, posicao_nos, edge_labels=pesos)
    
    plt.title(f"Grafo aleatório com {grafo.number_of_nodes()} nós")
    plt.savefig(caminho_imagem, format='png', dpi=300)
    plt.close()

def salvar_csv_grafo(grafo: nx.Graph, caminho_csv: str = "grafo.csv"):
    """
    Salva os dados do grafo em um arquivo CSV com as arestas e seus respectivos pesos.
    
    Parâmetros:
    - grafo (networkx.Graph): o grafo a ser salvo.
    - caminho_csv (str): caminho do arquivo CSV a ser salvo.
    """
    with open(caminho_csv, mode='w', newline='') as arquivo_csv:
        escritor_csv = csv.writer(arquivo_csv)
        escritor_csv.writerow(['no_origem', 'no_destino', 'peso'])
        
        for no_origem, no_destino, dados_aresta in grafo.edges(data=True):
            escritor_csv.writerow([no_origem, no_destino, dados_aresta['peso']])

def main(quantidade_nos: int = 5, probabilidade_conexao: float = 0.3, caminho_pasta: str = "_graph", peso_minimo: int = 1, peso_maximo: int = 10):
    """
    Função principal para gerar o grafo, salvar imagem e salvar os dados em CSV.
    
    Parâmetros:
    - quantidade_nos (int): número de nós do grafo.
    - probabilidade_conexao (float): probabilidade de conexão entre os nós.
    - caminho_pasta (str): caminho da pasta onde os arquivos serão salvos.
    - peso_minimo (int): peso mínimo das arestas.
    - peso_maximo (int): peso máximo das arestas.
    """
    # Garantindo que a pasta de saída exista
    os.makedirs(caminho_pasta, exist_ok=True)

    # Gerando o grafo aleatório
    grafo = gerar_grafo_aleatorio(quantidade_nos, probabilidade_conexao, peso_minimo, peso_maximo)
    
    # Salvando a imagem do grafo
    caminho_imagem = f"{caminho_pasta}/grafo.png"
    salvar_imagem_grafo(grafo, caminho_imagem)
    
    # Salvando os dados do grafo em um arquivo CSV
    caminho_csv = f"{caminho_pasta}/grafo.csv"
    salvar_csv_grafo(grafo, caminho_csv)

# Execução do código
if __name__ == '__main__':
    main()